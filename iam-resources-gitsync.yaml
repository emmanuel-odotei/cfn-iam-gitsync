AWSTemplateFormatVersion: "2010-09-09"
Description: IAM automation with GitSync lab 2 - week 1 using custom resource for CreateUser

Parameters:
  S3UserEmail:
    Type: String
    Default: s3user1@completed.com

  EC2UserEmail:
    Type: String
    Default: ec2user1@completed.com

Resources:

  OneTimePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: IAMUserTempPassword
      GenerateSecretString:
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'
        SecretStringTemplate: "{}"
        GenerateStringKey: password

  S3Group:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3ReadOnlyGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess

  EC2Group:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2ReadOnlyGroup
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess

  S3UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /iam/s3-user/email
      Type: String
      Value: !Ref S3UserEmail

  EC2UserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /iam/ec2-user/email
      Type: String
      Value: !Ref EC2UserEmail

  CustomResourceLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CustomResourceLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: IAMCreateUserPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateUser
                  - iam:AddUserToGroup
                  - iam:CreateLoginProfile
                  - iam:TagUser
                Resource: "*"

  CustomUserCreateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CreateIAMUsers
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaRole.Arn
      Timeout: 10
      Code:
        ZipFile: |
          import boto3
          import json

          iam = boto3.client('iam')

          def handler(event, context):
              print("Received event:", json.dumps(event))
              request_type = event['RequestType']
              props = event['ResourceProperties']

              if request_type in ['Create', 'Update']:
                  try:
                      user_name = props['UserName']
                      group_name = props['Group']
                      password = props['Password']
                      email = props['Email']

                      iam.create_user(UserName=user_name)
                      iam.add_user_to_group(UserName=user_name, GroupName=group_name)
                      iam.create_login_profile(
                          UserName=user_name,
                          Password=password,
                          PasswordResetRequired=True
                      )
                      iam.tag_user(UserName=user_name, Tags=[{'Key': 'email', 'Value': email}])

                  except Exception as e:
                      print("Error:", str(e))
                      raise

              return { 'PhysicalResourceId': f"user-{props['UserName']}" }

  CreateS3User:
    Type: Custom::CreateIAMUser
    Properties:
      ServiceToken: !GetAtt CustomUserCreateFunction.Arn
      UserName: s3-user
      Group: !Ref S3Group
      Password: !Sub "{{resolve:secretsmanager:${OneTimePassword}:SecretString:password}}"
      Email: !Ref S3UserEmail

  CreateEC2User:
    Type: Custom::CreateIAMUser
    Properties:
      ServiceToken: !GetAtt CustomUserCreateFunction.Arn
      UserName: ec2-user
      Group: !Ref EC2Group
      Password: !Sub "{{resolve:secretsmanager:${OneTimePassword}:SecretString:password}}"
      Email: !Ref EC2UserEmail

  NotifyLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: NotifyLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NotifyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ssm:GetParameter
                  - secretsmanager:GetSecretValue
                Resource: "*"

  NotifyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: NotifyNewUser
      Runtime: python3.12
      Handler: index.handler
      Role: !GetAtt NotifyLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3, json

          def handler(event, context):
              print("Lambda triggered. Event received.")
              ssm = boto3.client('ssm')
              secrets = boto3.client('secretsmanager')

              print("Received event:", json.dumps(event))

              user = event['detail']['requestParameters'].get('userName', 's3-user')

              email_param = f"/iam/{user}/email"
              try:
                  email = ssm.get_parameter(Name=email_param)['Parameter']['Value']
              except Exception as e:
                  email = f"Not found ({str(e)})"

              try:
                  secret = secrets.get_secret_value(SecretId='IAMUserTempPassword')
                  password = json.loads(secret['SecretString'])['password']
              except Exception as e:
                  password = f"Unavailable ({str(e)})"

              print(f"New IAM user created: {user}")
              print(f"Email: {email}, Temporary Password: {password}")

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt NotifyLambdaFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt UserCreateEventRule.Arn

  UserCreateEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: NewIAMUserRule
      Description: Trigger event when a new IAM user is created
      EventPattern:
        source:
          - "aws.iam"
        detail-type:
          - "AWS API Call via CloudTrail"
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      Targets:
        - Arn: !GetAtt NotifyLambdaFunction.Arn
          Id: NotifyLambdaTarget

Outputs:
  SecretARN:
    Description: ARN of the secret containing the initial password
    Value: !Ref OneTimePassword

  LambdaFunctionARN:
    Description: ARN of the Lambda function
    Value: !GetAtt NotifyLambdaFunction.Arn

  EventRuleARN:
    Description: ARN of the EventBridge rule
    Value: !GetAtt UserCreateEventRule.Arn