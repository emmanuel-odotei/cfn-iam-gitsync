AWSTemplateFormatVersion: "2010-09-09"
Description: "Provision IAM Users with Secure OTP, Group Access, and Audit Notifications via EventBridge"

Parameters:
  WebAppUserEmail:
    Type: String
    Description: Email address for the ec2User
    Default: ec2_user@example.com
  StorageUserEmail:
    Type: String
    Description: Email address for the s3User
    Default: s3_user@example.com

Resources:
  # One-Time Password stored in Secrets Manager
  OneTimePasswordSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: initial-iam-password
      Description: Auto-generated password for new IAM users
      GenerateSecretString:
        SecretStringTemplate: "{}"
        GenerateStringKey: password
        PasswordLength: 16
        ExcludeCharacters: '"@/\'
        RequireEachIncludedType: true
      Tags:
        - Key: Component
          Value: UserProvisioning

  # IAM Group for read-only S3 accesss
  S3UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: S3UserGroup
      Policies:
        - PolicyName: S3ViewOnlyPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource: "*"

  # IAM Group for EC2 describe access
  EC2UserGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: EC2UserGroup
      Policies:
        - PolicyName: EC2InfoAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:Describe*
                  - ec2:Get*
                Resource: "*"

  # IAM User for compute workloads - EC2
  WebAppUser:
    Type: AWS::IAM::User
    Properties:
      UserName: ec2User
      Groups:
        - !Ref EC2UserGroup
      LoginProfile:
        Password: !Sub "{{resolve:secretsmanager:${OneTimePasswordSecret}::password}}"
        PasswordResetRequired: true

  # SSM Parameter to store webapp user's email
  WebAppUserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /provisioned-users/ec2User/email
      Type: String
      Value: !Ref WebAppUserEmail
      Description: Registered email for ec2User

  # IAM User for storage workloads
  # StorageUser:
  #   Type: AWS::IAM::User
  #   Properties:
  #     UserName: s3User
  #     Groups:
  #       - !Ref S3UserGroup
  #     LoginProfile:
  #       Password: !Sub "{{resolve:secretsmanager:${OneTimePasswordSecret}::password}}"
  #       PasswordResetRequired: true

  # SSM Parameter to store storage user's email
  StorageUserEmailParam:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /provisioned-users/s3User/email
      Type: String
      Value: !Ref StorageUserEmail
      Description: Registered email for s3User

  # IAM Role for Lambda with read access to Parameters and Secrets
  LambdaHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/provisioned-users/*
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref OneTimePasswordSecret

  # Lambda function to log user creation events
  UserCreationLoggerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: UserCreationLambda
      Handler: index.handler
      Runtime: python3.8
      Role: !GetAtt LambdaHandlerRole.Arn
      Code:
        ZipFile: |
          import boto3

          def handler(event, context):
              username = event['detail']['requestParameters']['userName']
              ssm = boto3.client('ssm')
              secrets = boto3.client('secretsmanager')

              email_param = ssm.get_parameter(
                  Name=f'/provisioned-users/{username}/email',
                  WithDecryption=False
              )
              email = email_param['Parameter']['Value']

              secret = secrets.get_secret_value(SecretId='initial-iam-password')
              otp = secret['SecretString']

              print(f"[New User Created] Username: {username}")
              print(f"Email: {email}")
              print(f"Temporary Password: {otp}")

              return {
                  'statusCode': 200,
                  'body': f"User {username} processed successfully."
              }

  # Allow EventBridge to invoke Lambda
  EventBridgeLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UserCreationLoggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt IAMUserEventRule.Arn

  # EventBridge rule to catch CreateUser API calls
  IAMUserEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Fire on new IAM user creation
      EventPattern:
        source:
          - aws.iam
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - iam.amazonaws.com
          eventName:
            - CreateUser
      Targets:
        - Arn: !GetAtt UserCreationLoggerFunction.Arn
          Id: UserCreationTarget

Outputs:
  PasswordSecretARN:
    Description: ARN of the password secret for new users
    Value: !Ref OneTimePasswordSecret
  LoggerFunctionARN:
    Description: ARN of the Lambda function handling user creation logs
    Value: !GetAtt UserCreationLoggerFunction.Arn
  EventBridgeRuleARN:
    Description: ARN of the rule triggering on IAM CreateUser events
    Value: !GetAtt IAMUserEventRule.Arn
